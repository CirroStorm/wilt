
Usage
======

Outwardly Wilt looks like a normal class based API library, however due to the asynchronous nature
of HTTP requests in the Dart runtime no synchronous procedures are provided, results are passed back
to the client by a standard dart Futures based interface or by calling a client supplied callback
(known as a completer) function. 

The future interface always completes, if a completer has been registered this is also called. 
Wilt returns the operation type performed in its results interface(see the Result Interface
document for details), this allows a single completer function to be registered and a switch statement
employed to for document/database operations. This is provided for users who do not want to use
the future based API on each Wilt method.


An annotated example of this using the WiltBrowserClient to get a document by id is shown below:-

import 'package:wilt.dart';
import 'package:wilt_browser_client.dart'; // Browser
// or
// import 'package:wilt_server_client.dart'; // Server

main() {

	/**
	* The 'completer' function for the WiltBrowserClient API call *
	*/
	void completer(){ // Completion interface
	void completer(res){ // Future interface
       
       // Only for the completion interface.
       jsonobject.JsonObject res = wilting.completionResponse;
        
       /* Check for error */    
       if ( res.error ) {
         /* Process the error */
         jsonobject.JsonObject errorResponse = res.jsonCouchResponse;
         String errorText = errorResponse.error;
         String reasonText = errorResponse.reason;
         int statusCode = res.errorCode;
         return;
       }
       
       /* Get the success response*/
       jsonobject.JsonObject successResponse = res.jsonCouchResponse;
       .... do other stuff
    }
    
    
    /**
    * Instantiate a WiltBrowserClient object.
    */
    WiltBrowserClient wilting = new Wilt("localhost", 
                            "5984",
                            "http://");
                            // and you can register a global completer [completer]);
                            
    /* Set the database to use */
    wilting.db = "mydb";
    
    /* Set the completion function */
    wilting.resultCompletion = completer; //ONLY if you want the completion interface
    
    /* Call the wilt API */
    wilting.getDocument("myuniqueid")..then((res) {
            completer(res); 
            //do something },// ONLY if you want the future interface //
         onError:(WiltException e){
         //handle error
    });


 }

This is exactly the same as Wilt on the server side, the wilting object in this case becomes
a WiltServerClient.

Things to note from the above code :-

1. Responses to API method calls from Wilt are supplied using JSON objects.

2. The completer function is global, ie it is in force from when set to when changed for
   all API method calls. This allows a specific completer to be used per call, or one global completer
   to be used for all API calls.
   
3. The higher level functions such as the one above need a database to use, again this is set
   globally or on a per call basis. All API methods except httpRequest require a database to be set.
   
4. Note the constructor, host, port and scheme must be supplied but can be empty, i.e '', we do not 
   always need a port for instance. If any of these are supplied as null Wilt will throw a WiltException.
   
The structure of the completion response JSON Object from Wilt can be seen in the Result Interface 
document.


Using JSON Objects allows a more natural manipulation of CouchDB responses than just returning JSON
strings(you can of course stringify the response if it suits you to do so). However CouchDB uses JSON 
identifiers starting with an underscore, e.g. _id, _rev etc. These are not currently supported by JSON Object
at this time and if these are needed for a particular CouchDB operation then the string methods supplied by the
API must be used over the methods that take JSON Objects. The class WiltUserUtils contains helper functions
to manipulate JSON Objects with underscore properties.

Wilt checks its API parameters when supplied, if required parameters are not supplied or numeric parameters
are not valid Wilt will either raise a future error with a WiltException for future based API calls, or for
non-future based ones and any calls using the completion interface will throw a WiltException with a message 
containing the failure reason. Dart can also throw exceptions, exception handling in these cases needs to be performed by the client, Wilt itself has
no exception handling built in.

Change Notifications
====================

Change notification is performed in 'normal' mode with the notification request being sent to
CouchDB as dictated by the heartbeat time in the notification changes parameters set. Change 
notifications themselves are deleivered to the client on the changeNotification stream. An example 
of using change notifications is shown below :-

  wilting.db = databaseName;
  wilting.startChangeNotification()
  wilting.changeNotification.listen((e) {
          
        if ( e.type == WiltChangeNotificationEvent.UPDATE )
        .......
          
      }); 
      
 
The events themselves are instances of the WiltChangeNotificationEvent class, see this class 
for more details. 
The change notification API also allows stopping of change notifications, pausing and restarting 
and changing the parameter set.

Please see the change notification methods for more information. Note that unlike the reast of Wilts
API these are not future based and operate immediately.
 
Authentication
==============

Wilt has two methods of authentication, none(the CouchDB Admin Party) or Basic HTTP authentication.
The method to use is set using the login method where a username and password are supplied to Wilt,
when called Basic authentication is automatically set. Cookie authentication supported by CouchDB is not
implemented in Wilt.


Next Steps
===========

Hopefully this should be enough to get you started with Wilt, if you are new to the CouchDB world
please read the CouchDB_and_CORS.txt document for guidance using Wilt in the browser environmen.

The test suite contains numerous examples of using Wilt in both browser and server environments.

Please have a look at this code for more detailed examples of Wilt usage.










